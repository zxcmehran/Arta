<?php
/**
 * UTF8-Friendly string functions replacement.
 * 
 * @author		Mehran Ahadi
 * @package		Arta
 * @version		$Revision: 1 2011/08/02 14:20 +3.5 GMT $
 * @link		http://www.artaproject.com	Author's homepage
 * @copyright	Copyright (C) 2008 - 2011  Mehran Ahadi
 * @license		GNU General Public License version 3 or later; see COPYING file.
 */
 
//Check arta
if(!defined('ARTA_VALID')){die('No access');}

/**
 * ArtaUTF8
 * UTF-8 friendly replacement functions
 * 
 * 
 * This class is based on: 
 * UTF-8 friendly replacement functions - v0.2 Copyright (C) 2004-2006 Niels Leenheer & Andy Matsubara
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version. 
 * 
 * 
 * 
 * 
 *	Supported functions:
 * - ArtaUTF8::convert()
 * - ArtaUTF8::strtolower()
 * - ArtaUTF8::strtoupper()
 * - ArtaUTF8::strlen()
 * - ArtaUTF8::strwidth()
 * - ArtaUTF8::substr()
 * - ArtaUTF8::strimwidth()
 * - ArtaUTF8::strcut()
 * - ArtaUTF8::strrpos()
 * - ArtaUTF8::strpos()
 * - ArtaUTF8::substr_count()
 * - ArtaUTF8::encode_mimeheader()
 * - ArtaUTF8::send_mail()
 * - ArtaUTF8::encode_javascript()
 * - ArtaUTF8::encode_numericentity()
 * 
 * @static
 */
class ArtaUTF8 {

	/**      
	 * Convert a foreign charset encoding to UTF-8
	 * @static
	 */
	static function convert($string, $encoding) {
	
		if (function_exists('iconv')) {
			return @iconv($encoding, 'UTF-8//IGNORE', $contents);
		}
	
		if (function_exists('mb_convert_encoding')) {
			@mb_substitute_character('none');
			return @mb_convert_encoding($contents, 'UTF-8', $encoding );
		}
		
		return $string;
	}
	
	/**      
	 * Determine the number of characters of a string
	 * Compatible with mb_strlen(), an UTF-8 friendly replacement for strlen()
	 * @static
	 */
	static function strlen($str) {
		return preg_match_all('/[\x01-\x7F]|[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF][\x80-\xBF]/', $str, $arr);
	}
	
	/**      
	 * Count the number of substring occurances
	 * Compatible with mb_substr_count(), an UTF-8 friendly replacement for substr_count()
	 * @static
	 */
	static function substr_count($haystack, $needle) {
		return substr_count($haystack, $needle);
	}
	
	/**      
	 * Return part of a string, length and offset in characters
	 * Compatible with mb_substr(), an UTF-8 friendly replacement for substr()
	 * @static
	 */
	static function substr($str, $start , $length = NULL) {
		preg_match_all('/[\x01-\x7F]|[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF][\x80-\xBF]/', $str, $arr);
		if (is_numeric($length))
			return implode('', array_slice($arr[0], $start, $length));
		else
			return implode('', array_slice($arr[0], $start));
	}
	
	/**      
	 * Return part of a string, length and offset in bytes
	 * Compatible with mb_strcut()
	 * @static
	 */
	static function strcut($str, $start, $length = NULL) {
		if ($start < 0)	$start += strlen($str);
	
		$original = $start;
	
		while ($start > 0 && intval(ord($str[$start]) & 0xC0) == 0x80) 
			$start--;
	
		$start = max($start, 0);
		$original = max($original, 0);
	
		if ($start < strlen($str))
		{
			if (is_null($length)) {
				return substr($str, $start);
			}
			elseif ($length > 0) {
				$end = $start + $length;
	
				while ($end > 0 && intval(ord($str[$end]) & 0xC0) == 0x80) 
					$end--;
					
				return substr($str, $start, $end - $start);
			}
			elseif ($length < 0) {
				$end = strlen($str) + $length - ($original - $start);
	
				while ($end > 0 && intval(ord($str[$end]) & 0xC0) == 0x80) 
					$end--;
				
				if ($end > 0)
					return substr($str, $start, $end - $start);
			}
		}
		
		return '';
	}
	
	/**      
	 * Determine the width of a string
	 * Compatible with mb_strwidth()
	 * @static
	 */
	static function strwidth($str) {
		$double = preg_match_all('/[\xE2-\xEF][\x80-\xBF][\x80-\xBF]/', $str, $arr) - 			// U+2000 - U+FFFF = double width
				  preg_match_all('/\xEF\xBD[\xA1-\xBF]|\xEF\xBE[\x80-\x9F]/', $str, $arr);		// U+FF61 - U+FF9F = single width
		$null   = preg_match_all('/[\x00-\x19]/', $str, $arr);									// U+0000 - U+0019 = no width
		
		return ArtaUTF8::strlen($str) - $null + $double;
	}
	
	/**      
	 * Get truncated string with specified width
	 * Compatible with mb_strimwidth()
	 * @static
	 */
	static function strimwidth($str, $start, $width, $trimmarker = '') {
	
		$str   = ArtaUTF8::substr($str, $start);
		$width = $width - ArtaUTF8::strwidth($trimmarker);
		
		for ($i = 0; $i < strlen($str); $i++)
		{
			$b1 = (int)ord($str[$i]);
	
			if ($b1 < 0x80 || $b1 > 0xBF)
			{
				$c++;
	
				if ($b1 > 0xE2) 
				{
					$b2 = (int)ord($str[$i + 1]);
					$b3 = (int)ord($str[$i + 2]);
					
					if (($b2 == 0xBD && $b3 >= 0xA1) || ($b2 == 0xBE && $b3 <= 0x9F))
						$count++;
					else
						$count = $count + 2;
				}
				else
					$count++;
			}
			
			if ($count > $width) {
				return ArtaUTF8::substr($str, 0, $c - 1) . $trimmarker;
			}
		}	
	}
	
	/**      
	 * Find position of last occurance of a string in another string
	 * Compatible with mb_strrpos(), an UTF-8 friendly replacement for strrpos()
	 * @static
	 */
	static function strrpos($haystack, $needle) {
		$pos = strrpos($haystack, $needle);
	
		if ($pos === false) 
			return false;
		else
			return ArtaUTF8::strlen(substr($haystack, 0, $pos));
	}
	
	/**      
	 * Find position of first occurance of a string in another string
	 * Compatible with mb_strpos(), an UTF-8 friendly replacement for strpos()
	 * @static
	 */
	static function strpos($haystack, $needle, $offset = 0) {
		$comp = 0;
		
		while (!isset($length) || $length < $offset) 
		{
			$pos = strpos($haystack, $needle, $offset + $comp);
			if ($pos === false) return false;
			$length = ArtaUTF8::strlen(substr($haystack, 0, $pos));
			if ($length < $offset) $comp = $pos - $length;
		}
		
		return $length;
	}
	
	/**      
	 * Convert a string to lower case
	 * Compatible with mb_strtolower(), an UTF-8 friendly replacement for strtolower()
	 * @static
	 */
	static function strtolower($str) {
		global $UTF8_TABLES;
		if($UTF8_TABLES==null){self::initialize();}
		return strtr($str, $UTF8_TABLES['strtolower']);
	}
	
	/**      
	 * Convert a string to upper case
	 * Compatible with mb_strtoupper(), an UTF-8 friendly replacement for strtoupper()
	 * @static
	 */
	static function strtoupper($str) {
		global $UTF8_TABLES;
		if($UTF8_TABLES==null){self::initialize();}
		return strtr($str, $UTF8_TABLES['strtoupper']);
	}
	
	/**      
	 * Encode a string for use in a MIME header
	 * Simplied replacement for mb_encode_mimeheader()
	 * @static
	 */
	static function encode_mimeheader($str) {
		$length = 45; $pos = 0; $max = strlen($str);
		
		while ($pos < $max)
		{
			if ($pos + $length < $max) 
			{
				$adjust = 0;
				
				while (intval(ord($str[$pos + $length + $adjust]) & 0xC0) == 0x80) 
					$adjust--;
		
				$buffer .= ($buffer == '' ? '' : "?=\r\n =?UTF-8?B?") . base64_encode(substr($str, $pos, $length + $adjust));
				$pos = $pos + $length + $adjust;
			} 
			else 
			{
				$buffer .= ($buffer == '' ? '' : "?=\r\n =?UTF-8?B?") . base64_encode(substr($str, $pos));
				$pos = $max;
			}	
		}
		
		return '=?UTF-8?B?' . $buffer . '?=';
	}
	
	/**      
	 * Send mail
	 * Replacement for mb_send_mail(), an UTF-8 friendly replacement for mail()
	 * @static
	 */
	static function send_mail($to, $subject, $message , $additional_headers = '', $additional_parameter = '') {
		$subject = ArtaUTF8::encode_mimeheader($subject);
		$message = chunk_split(base64_encode($message));
	
		$additional_headers = trim($additional_headers);
		
		if ($additional_headers != '')
			$additional_headers .= "\r\n";
		
		$additional_headers .=
			"Mime-Version: 1.0\r\n" . 
			"Content-Type: text/plain; charset=UTF-8\r\n" . 
			"Content-Transfer-Encoding: base64";
			
		@mail($to, $subject, $message, $additional_headers, $additional_parameter); 
	}
	
	/**      
	 * Prepare an UTF-8 string for use in JavaScript
	 * @static
	 */
	static function encode_javascript($string)
	{
		$string = str_replace ('\\', '\\\\', $string);
		$string = str_replace ('"', '\\"', $string);
		$string = str_replace ("'", "\\'", $string);
		$string = str_replace ("\n", "\\n", $string);
		$string = str_replace ("\r", "\\r", $string);
		$string = str_replace ("\t", "\\t", $string);
		
		$len = strlen ($string);
		$pos = 0;
		$out = '';
			
		while ($pos < $len) 
		{
			$ascii = ord (substr ($string, $pos, 1));
			
			if ($ascii >= 0xF0) 
			{
				$byte[1] = ord(substr ($string, $pos, 1)) - 0xF0;
				$byte[2] = ord(substr ($string, $pos + 1, 1)) - 0x80;
				$byte[3] = ord(substr ($string, $pos + 2, 1)) - 0x80;
				$byte[4] = ord(substr ($string, $pos + 3, 1)) - 0x80;
	
				$char_code = ($byte[1] << 18) + ($byte[2] << 12) + ($byte[3] << 6) + $byte[4];
				$pos += 4;
			}
			elseif (($ascii >= 0xE0) && ($ascii < 0xF0)) 
			{
				$byte[1] = ord(substr ($string, $pos, 1)) - 0xE0;
				$byte[2] = ord(substr ($string, $pos + 1, 1)) - 0x80;
				$byte[3] = ord(substr ($string, $pos + 2, 1)) - 0x80;
	
				$char_code = ($byte[1] << 12) + ($byte[2] << 6) + $byte[3];
				$pos += 3;
			}
			elseif (($ascii >= 0xC0) && ($ascii < 0xE0)) 
			{
				$byte[1] = ord(substr ($string, $pos, 1)) - 0xC0;
				$byte[2] = ord(substr ($string, $pos + 1, 1)) - 0x80;
	
				$char_code = ($byte[1] << 6) + $byte[2];
				$pos += 2;
			}
			else 
			{
				$char_code = ord(substr ($string, $pos, 1));
				$pos += 1;
			}
	
			if ($char_code < 0x80)
				$out .= chr($char_code);
			else
				$out .=  '\\u'. str_pad(dechex($char_code), 4, '0', STR_PAD_LEFT);
		}
	
		return $out;	
	}			
	
	/**      
	 * Encode an UTF-8 string with numeric entities
	 * Simplied replacement for mb_encode_numericentity()
	 * @static
	 */
	static function encode_numericentity($string)
	{
		$len = strlen ($string);
		$pos = 0;
		$out = '';
			
		while ($pos < $len) 
		{
			$ascii = ord (substr ($string, $pos, 1));
			
			if ($ascii >= 0xF0) 
			{
				$byte[1] = ord(substr ($string, $pos, 1)) - 0xF0;
				$byte[2] = ord(substr ($string, $pos + 1, 1)) - 0x80;
				$byte[3] = ord(substr ($string, $pos + 2, 1)) - 0x80;
				$byte[4] = ord(substr ($string, $pos + 3, 1)) - 0x80;
	
				$char_code = ($byte[1] << 18) + ($byte[2] << 12) + ($byte[3] << 6) + $byte[4];
				$pos += 4;
			}
			elseif (($ascii >= 0xE0) && ($ascii < 0xF0)) 
			{
				$byte[1] = ord(substr ($string, $pos, 1)) - 0xE0;
				$byte[2] = ord(substr ($string, $pos + 1, 1)) - 0x80;
				$byte[3] = ord(substr ($string, $pos + 2, 1)) - 0x80;
	
				$char_code = ($byte[1] << 12) + ($byte[2] << 6) + $byte[3];
				$pos += 3;
			}
			elseif (($ascii >= 0xC0) && ($ascii < 0xE0)) 
			{
				$byte[1] = ord(substr ($string, $pos, 1)) - 0xC0;
				$byte[2] = ord(substr ($string, $pos + 1, 1)) - 0x80;
	
				$char_code = ($byte[1] << 6) + $byte[2];
				$pos += 2;
			}
			else 
			{
				$char_code = ord(substr ($string, $pos, 1));
				$pos += 1;
			}
	
			if ($char_code < 0x80)
				$out .= chr($char_code);
			else
				$out .=  '&#'. str_pad($char_code, 5, '0', STR_PAD_LEFT) . ';';
		}
	
		return $out;	
	}	
	
	/**
	 * Initializes UTF8 Class.
	 * @static
	 */
	static function initialize(){
		global $UTF8_TABLES;
		$UTF8_TABLES['strtolower'] = array(
							"ï¼؛" => "ï½ڑ",	"ï¼¹" => "ï½™",	"ï¼¸" => "ï½ک",
							"ï¼·" => "ï½—",	"ï¼¶" => "ï½–",	"ï¼µ" => "ï½•",
							"ï¼´" => "ï½”",	"ï¼³re" => "ï½“",	"ï¼²" => "ï½’",
							"ï¼±" => "ï½‘",	"ï¼°" => "ï½گ",	"ï¼¯" => "ï½ڈ",
							"ï¼®" => "ï½ژ",	"ï¼­" => "ï½چ",	"ï¼¬" => "ï½Œ",
							"ï¼«" => "ï½‹",	"ï¼ھ" => "ï½ٹ",	"ï¼©" => "ï½‰",
							"ï¼¨" => "ï½ˆ",	"ï¼§" => "ï½‡",	"ï¼¦" => "ï½†",
							"ï¼¥" => "ï½…",	"ï¼¤" => "ï½„",	"ï¼£" => "ï½ƒ",
							"ï¼¢" => "ï½‚",	"ï¼،" => "ï½پ",	"â„«" => "أ¥",
							"â„ھ" => "k",	"â„¦" => "د‰",	"ل؟»" => "ل½½",
							"ل؟؛" => "ل½¼",	"ل؟¹" => "ل½¹",	"ل؟¸" => "ل½¸",
							"ل؟¬" => "ل؟¥",	"ل؟«" => "ل½»",	"ل؟ھ" => "ل½؛",
							"ل؟©" => "ل؟،",	"ل؟¨" => "ل؟ ",	"ل؟›" => "ل½·",
							"ل؟ڑ" => "ل½¶",	"ل؟™" => "ل؟‘",	"ل؟ک" => "ل؟گ",
							"ل؟‹" => "ل½µ",	"ل؟ٹ" => "ل½´",	"ل؟‰" => "ل½³",
							"ل؟ˆ" => "ل½²",	"ل¾»" => "ل½±",	"ل¾؛" => "ل½°",
							"ل¾¹" => "ل¾±",	"ل¾¸" => "ل¾°",	"ل½¯" => "ل½§",
							"ل½®" => "ل½¦",	"ل½­" => "ل½¥",	"ل½¬" => "ل½¤",
							"ل½«" => "ل½£",	"ل½ھ" => "ل½¢",	"ل½©" => "ل½،",
							"ل½¨" => "ل½ ",	"ل½ں" => "ل½—",	"ل½‌" => "ل½•",
							"ل½›" => "ل½“",	"ل½™" => "ل½‘",	"ل½چ" => "ل½…",
							"ل½Œ" => "ل½„",	"ل½‹" => "ل½ƒ",	"ل½ٹ" => "ل½‚",
							"ل½‰" => "ل½پ",	"ل½ˆ" => "ل½€",	"ل¼؟" => "ل¼·",
							"ل¼¾" => "ل¼¶",	"ل¼½" => "ل¼µ",	"ل¼¼" => "ل¼´",
							"ل¼»" => "ل¼³",	"ل¼؛" => "ل¼²",	"ل¼¹" => "ل¼±",
							"ل¼¸" => "ل¼°",	"ل¼¯" => "ل¼§",	"ل¼®" => "ل¼¦",
							"ل¼­" => "ل¼¥",	"ل¼¬" => "ل¼¤",	"ل¼«" => "ل¼£",
							"ل¼ھ" => "ل¼¢",	"ل¼©" => "ل¼،",	"ل¼¨" => "ل¼ ",
							"ل¼‌" => "ل¼•",	"ل¼œ" => "ل¼”",	"ل¼›" => "ل¼“",
							"ل¼ڑ" => "ل¼’",	"ل¼™" => "ل¼‘",	"ل¼ک" => "ل¼گ",
							"ل¼ڈ" => "ل¼‡",	"ل¼ژ" => "ل¼†",	"ل¼چ" => "ل¼…",
							"ل¼Œ" => "ل¼„",	"ل¼‹" => "ل¼ƒ",	"ل¼ٹ" => "ل¼‚",
							"ل¼‰" => "ل¼پ",	"ل¼ˆ" => "ل¼€",	"ل»¸" => "ل»¹",
							"ل»¶" => "ل»·",	"ل»´" => "ل»µ",	"ل»²" => "ل»³",
							"ل»°" => "ل»±",	"ل»®" => "ل»¯",	"ل»¬" => "ل»­",
							"ل»ھ" => "ل»«",	"ل»¨" => "ل»©",	"ل»¦" => "ل»§",
							"ل»¤" => "ل»¥",	"ل»¢" => "ل»£",	"ل» " => "ل»،",
							"ل»‍" => "ل»ں",	"ل»œ" => "ل»‌",	"ل»ڑ" => "ل»›",
							"ل»ک" => "ل»™",	"ل»–" => "ل»—",	"ل»”" => "ل»•",
							"ل»’" => "ل»“",	"ل»گ" => "ل»‘",	"ل»ژ" => "ل»ڈ",
							"ل»Œ" => "ل»چ",	"ل»ٹ" => "ل»‹",	"ل»ˆ" => "ل»‰",
							"ل»†" => "ل»‡",	"ل»„" => "ل»…",	"ل»‚" => "ل»ƒ",
							"ل»€" => "ل»پ",	"ل؛¾" => "ل؛؟",	"ل؛¼" => "ل؛½",
							"ل؛؛" => "ل؛»",	"ل؛¸" => "ل؛¹",	"ل؛¶" => "ل؛·",
							"ل؛´" => "ل؛µ",	"ل؛²" => "ل؛³",	"ل؛°" => "ل؛±",
							"ل؛®" => "ل؛¯",	"ل؛¬" => "ل؛­",	"ل؛ھ" => "ل؛«",
							"ل؛¨" => "ل؛©",	"ل؛¦" => "ل؛§",	"ل؛¤" => "ل؛¥",
							"ل؛¢" => "ل؛£",	"ل؛ " => "ل؛،",	"ل؛”" => "ل؛•",
							"ل؛’" => "ل؛“",	"ل؛گ" => "ل؛‘",	"ل؛ژ" => "ل؛ڈ",
							"ل؛Œ" => "ل؛چ",	"ل؛ٹ" => "ل؛‹",	"ل؛ˆ" => "ل؛‰",
							"ل؛†" => "ل؛‡",	"ل؛„" => "ل؛…",	"ل؛‚" => "ل؛ƒ",
							"ل؛€" => "ل؛پ",	"ل¹¾" => "ل¹؟",	"ل¹¼" => "ل¹½",
							"ل¹؛" => "ل¹»",	"ل¹¸" => "ل¹¹",	"ل¹¶" => "ل¹·",
							"ل¹´" => "ل¹µ",	"ل¹²" => "ل¹³",	"ل¹°" => "ل¹±",
							"ل¹®" => "ل¹¯",	"ل¹¬" => "ل¹­",	"ل¹ھ" => "ل¹«",
							"ل¹¨" => "ل¹©",	"ل¹¦" => "ل¹§",	"ل¹¤" => "ل¹¥",
							"ل¹¢" => "ل¹£",	"ل¹ " => "ل¹،",	"ل¹‍" => "ل¹ں",
							"ل¹œ" => "ل¹‌",	"ل¹ڑ" => "ل¹›",	"ل¹ک" => "ل¹™",
							"ل¹–" => "ل¹—",	"ل¹”" => "ل¹•",	"ل¹’" => "ل¹“",
							"ل¹گ" => "ل¹‘",	"ل¹ژ" => "ل¹ڈ",	"ل¹Œ" => "ل¹چ",
							"ل¹ٹ" => "ل¹‹",	"ل¹ˆ" => "ل¹‰",	"ل¹†" => "ل¹‡",
							"ل¹„" => "ل¹…",	"ل¹‚" => "ل¹ƒ",	"ل¹€" => "ل¹پ",
							"ل¸¾" => "ل¸؟",	"ل¸¼" => "ل¸½",	"ل¸؛" => "ل¸»",
							"ل¸¸" => "ل¸¹",	"ل¸¶" => "ل¸·",	"ل¸´" => "ل¸µ",
							"ل¸²" => "ل¸³",	"ل¸°" => "ل¸±",	"ل¸®" => "ل¸¯",
							"ل¸¬" => "ل¸­",	"ل¸ھ" => "ل¸«",	"ل¸¨" => "ل¸©",
							"ل¸¦" => "ل¸§",	"ل¸¤" => "ل¸¥",	"ل¸¢" => "ل¸£",
							"ل¸ " => "ل¸،",	"ل¸‍" => "ل¸ں",	"ل¸œ" => "ل¸‌",
							"ل¸ڑ" => "ل¸›",	"ل¸ک" => "ل¸™",	"ل¸–" => "ل¸—",
							"ل¸”" => "ل¸•",	"ل¸’" => "ل¸“",	"ل¸گ" => "ل¸‘",
							"ل¸ژ" => "ل¸ڈ",	"ل¸Œ" => "ل¸چ",	"ل¸ٹ" => "ل¸‹",
							"ل¸ˆ" => "ل¸‰",	"ل¸†" => "ل¸‡",	"ل¸„" => "ل¸…",
							"ل¸‚" => "ل¸ƒ",	"ل¸€" => "ل¸پ",	"ص–" => "ض†",
							"ص•" => "ض…",	"ص”" => "ض„",	"ص“" => "ضƒ",
							"ص’" => "ض‚",	"ص‘" => "ضپ",	"صگ" => "ض€",
							"صڈ" => "ص؟",	"صژ" => "ص¾",	"صچ" => "ص½",
							"صŒ" => "ص¼",	"ص‹" => "ص»",	"صٹ" => "ص؛",
							"ص‰" => "ص¹",	"صˆ" => "ص¸",	"ص‡" => "ص·",
							"ص†" => "ص¶",	"ص…" => "صµ",	"ص„" => "ص´",
							"صƒ" => "ص³",	"ص‚" => "ص²",	"صپ" => "ص±",
							"ص€" => "ص°",	"ش؟" => "ص¯",	"ش¾" => "ص®",
							"ش½" => "ص­",	"ش¼" => "ص¬",	"ش»" => "ص«",
							"ش؛" => "صھ",	"ش¹" => "ص©",	"ش¸" => "ص¨",
							"ش·" => "ص§",	"ش¶" => "ص¦",	"شµ" => "ص¥",
							"ش´" => "ص¤",	"ش³" => "ص£",	"ش²" => "ص¢",
							"ش±" => "ص،",	"شژ" => "شڈ",	"شŒ" => "شچ",
							"شٹ" => "ش‹",	"شˆ" => "ش‰",	"ش†" => "ش‡",
							"ش„" => "ش…",	"ش‚" => "شƒ",	"ش€" => "شپ",
							"س¸" => "س¹",	"س´" => "سµ",	"س²" => "س³",
							"س°" => "س±",	"س®" => "س¯",	"س¬" => "س­",
							"سھ" => "س«",	"س¨" => "س©",	"س¦" => "س§",
							"س¤" => "س¥",	"س¢" => "س£",	"س " => "س،",
							"س‍" => "سں",	"سœ" => "س‌",	"سڑ" => "س›",
							"سک" => "س™",	"س–" => "س—",	"س”" => "س•",
							"س’" => "س“",	"سگ" => "س‘",	"سچ" => "سژ",
							"س‹" => "سŒ",	"س‰" => "سٹ",	"س‡" => "سˆ",
							"س…" => "س†",	"سƒ" => "س„",	"سپ" => "س‚",
							"ز¾" => "ز؟",	"ز¼" => "ز½",	"ز؛" => "ز»",
							"ز¸" => "ز¹",	"ز¶" => "ز·",	"ز´" => "زµ",
							"ز²" => "ز³",	"ز°" => "ز±",	"ز®" => "ز¯",
							"ز¬" => "ز­",	"زھ" => "ز«",	"ز¨" => "ز©",
							"ز¦" => "ز§",	"ز¤" => "ز¥",	"ز¢" => "ز£",
							"ز " => "ز،",	"ز‍" => "زں",	"زœ" => "ز‌",
							"زڑ" => "ز›",	"زک" => "ز™",	"ز–" => "ز—",
							"ز”" => "ز•",	"ز’" => "ز“",	"زگ" => "ز‘",
							"زژ" => "زڈ",	"زŒ" => "زچ",	"زٹ" => "ز‹",
							"ز€" => "زپ",	"ر¾" => "ر؟",	"ر¼" => "ر½",
							"ر؛" => "ر»",	"ر¸" => "ر¹",	"ر¶" => "ر·",
							"ر´" => "رµ",	"ر²" => "ر³",	"ر°" => "ر±",
							"ر®" => "ر¯",	"ر¬" => "ر­",	"رھ" => "ر«",
							"ر¨" => "ر©",	"ر¦" => "ر§",	"ر¤" => "ر¥",
							"ر¢" => "ر£",	"ر " => "ر،",	"ذ¯" => "رڈ",
							"ذ®" => "رژ",	"ذ­" => "رچ",	"ذ¬" => "رŒ",
							"ذ«" => "ر‹",	"ذھ" => "رٹ",	"ذ©" => "ر‰",
							"ذ¨" => "رˆ",	"ذ§" => "ر‡",	"ذ¦" => "ر†",
							"ذ¥" => "ر…",	"ذ¤" => "ر„",	"ذ£" => "رƒ",
							"ذ¢" => "ر‚",	"ذ،" => "رپ",	"ذ " => "ر€",
							"ذں" => "ذ؟",	"ذ‍" => "ذ¾",	"ذ‌" => "ذ½",
							"ذœ" => "ذ¼",	"ذ›" => "ذ»",	"ذڑ" => "ذ؛",
							"ذ™" => "ذ¹",	"ذک" => "ذ¸",	"ذ—" => "ذ·",
							"ذ–" => "ذ¶",	"ذ•" => "ذµ",	"ذ”" => "ذ´",
							"ذ“" => "ذ³",	"ذ’" => "ذ²",	"ذ‘" => "ذ±",
							"ذگ" => "ذ°",	"ذڈ" => "رں",	"ذژ" => "ر‍",
							"ذچ" => "ر‌",	"ذŒ" => "رœ",	"ذ‹" => "ر›",
							"ذٹ" => "رڑ",	"ذ‰" => "ر™",	"ذˆ" => "رک",
							"ذ‡" => "ر—",	"ذ†" => "ر–",	"ذ…" => "ر•",
							"ذ„" => "ر”",	"ذƒ" => "ر“",	"ذ‚" => "ر’",
							"ذپ" => "ر‘",	"ذ€" => "رگ",	"د´" => "خ¸",
							"د®" => "د¯",	"د¬" => "د­",	"دھ" => "د«",
							"د¨" => "د©",	"د¦" => "د§",	"د¤" => "د¥",
							"د¢" => "د£",	"د " => "د،",	"د‍" => "دں",
							"دœ" => "د‌",	"دڑ" => "د›",	"دک" => "د™",
							"خ«" => "د‹",	"خھ" => "دٹ",	"خ©" => "د‰",
							"خ¨" => "دˆ",	"خ§" => "د‡",	"خ¦" => "د†",
							"خ¥" => "د…",	"خ¤" => "د„",	"خ£" => "دƒ",
							"خ،" => "دپ",	"خ " => "د€",	"خں" => "خ؟",
							"خ‍" => "خ¾",	"خ‌" => "خ½",	"خœ" => "خ¼",
							"خ›" => "خ»",	"خڑ" => "خ؛",	"خ™" => "خ¹",
							"خک" => "خ¸",	"خ—" => "خ·",	"خ–" => "خ¶",
							"خ•" => "خµ",	"خ”" => "خ´",	"خ“" => "خ³",
							"خ’" => "خ²",	"خ‘" => "خ±",	"خڈ" => "دژ",
							"خژ" => "دچ",	"خŒ" => "دŒ",	"خٹ" => "خ¯",
							"خ‰" => "خ®",	"خˆ" => "خ­",	"خ†" => "خ¬",
							"ب²" => "ب³",	"ب°" => "ب±",	"ب®" => "ب¯",
							"ب¬" => "ب­",	"بھ" => "ب«",	"ب¨" => "ب©",
							"ب¦" => "ب§",	"ب¤" => "ب¥",	"ب¢" => "ب£",
							"ب " => "ئ‍",	"ب‍" => "بں",	"بœ" => "ب‌",
							"بڑ" => "ب›",	"بک" => "ب™",	"ب–" => "ب—",
							"ب”" => "ب•",	"ب’" => "ب“",	"بگ" => "ب‘",
							"بژ" => "بڈ",	"بŒ" => "بچ",	"بٹ" => "ب‹",
							"بˆ" => "ب‰",	"ب†" => "ب‡",	"ب„" => "ب…",
							"ب‚" => "بƒ",	"ب€" => "بپ",	"ا¾" => "ا؟",
							"ا¼" => "ا½",	"ا؛" => "ا»",	"ا¸" => "ا¹",
							"ا·" => "ئ؟",	"ا¶" => "ئ•",	"ا´" => "اµ",
							"ا±" => "ا³",	"ا®" => "ا¯",	"ا¬" => "ا­",
							"اھ" => "ا«",	"ا¨" => "ا©",	"ا¦" => "ا§",
							"ا¤" => "ا¥",	"ا¢" => "ا£",	"ا " => "ا،",
							"ا‍" => "اں",	"ا›" => "اœ",	"ا™" => "اڑ",
							"ا—" => "اک",	"ا•" => "ا–",	"ا“" => "ا”",
							"ا‘" => "ا’",	"اڈ" => "اگ",	"اچ" => "اژ",
							"اٹ" => "اŒ",	"ا‡" => "ا‰",	"ا„" => "ا†",
							"ئ¼" => "ئ½",	"ئ¸" => "ئ¹",	"ئ·" => "ت’",
							"ئµ" => "ئ¶",	"ئ³" => "ئ´",	"ئ²" => "ت‹",
							"ئ±" => "تٹ",	"ئ¯" => "ئ°",	"ئ®" => "تˆ",
							"ئ¬" => "ئ­",	"ئ©" => "تƒ",	"ئ§" => "ئ¨",
							"ئ¦" => "ت€",	"ئ¤" => "ئ¥",	"ئ¢" => "ئ£",
							"ئ " => "ئ،",	"ئں" => "ةµ",	"ئ‌" => "ة²",
							"ئœ" => "ة¯",	"ئک" => "ئ™",	"ئ—" => "ة¨",
							"ئ–" => "ة©",	"ئ”" => "ة£",	"ئ“" => "ة ",
							"ئ‘" => "ئ’",	"ئگ" => "ة›",	"ئڈ" => "ة™",
							"ئژ" => "ا‌",	"ئ‹" => "ئŒ",	"ئٹ" => "ة—",
							"ئ‰" => "ة–",	"ئ‡" => "ئˆ",	"ئ†" => "ة”",
							"ئ„" => "ئ…",	"ئ‚" => "ئƒ",	"ئپ" => "ة“",
							"إ½" => "إ¾",	"إ»" => "إ¼",	"إ¹" => "إ؛",
							"إ¸" => "أ؟",	"إ¶" => "إ·",	"إ´" => "إµ",
							"إ²" => "إ³",	"إ°" => "إ±",	"إ®" => "إ¯",
							"إ¬" => "إ­",	"إھ" => "إ«",	"إ¨" => "إ©",
							"إ¦" => "إ§",	"إ¤" => "إ¥",	"إ¢" => "إ£",
							"إ " => "إ،",	"إ‍" => "إں",	"إœ" => "إ‌",
							"إڑ" => "إ›",	"إک" => "إ™",	"إ–" => "إ—",
							"إ”" => "إ•",	"إ’" => "إ“",	"إگ" => "إ‘",
							"إژ" => "إڈ",	"إŒ" => "إچ",	"إٹ" => "إ‹",
							"إ‡" => "إˆ",	"إ…" => "إ†",	"إƒ" => "إ„",
							"إپ" => "إ‚",	"ؤ؟" => "إ€",	"ؤ½" => "ؤ¾",
							"ؤ»" => "ؤ¼",	"ؤ¹" => "ؤ؛",	"ؤ¶" => "ؤ·",
							"ؤ´" => "ؤµ",	"ؤ²" => "ؤ³",	"ؤ°" => "i",
							"ؤ®" => "ؤ¯",	"ؤ¬" => "ؤ­",	"ؤھ" => "ؤ«",
							"ؤ¨" => "ؤ©",	"ؤ¦" => "ؤ§",	"ؤ¤" => "ؤ¥",
							"ؤ¢" => "ؤ£",	"ؤ " => "ؤ،",	"ؤ‍" => "ؤں",
							"ؤœ" => "ؤ‌",	"ؤڑ" => "ؤ›",	"ؤک" => "ؤ™",
							"ؤ–" => "ؤ—",	"ؤ”" => "ؤ•",	"ؤ’" => "ؤ“",
							"ؤگ" => "ؤ‘",	"ؤژ" => "ؤڈ",	"ؤŒ" => "ؤچ",
							"ؤٹ" => "ؤ‹",	"ؤˆ" => "ؤ‰",	"ؤ†" => "ؤ‡",
							"ؤ„" => "ؤ…",	"ؤ‚" => "ؤƒ",	"ؤ€" => "ؤپ",
							"أ‍" => "أ¾",	"أ‌" => "أ½",	"أœ" => "أ¼",
							"أ›" => "أ»",	"أڑ" => "أ؛",	"أ™" => "أ¹",
							"أک" => "أ¸",	"أ–" => "أ¶",	"أ•" => "أµ",
							"أ”" => "أ´",	"أ“" => "أ³",	"أ’" => "أ²",
							"أ‘" => "أ±",	"أگ" => "أ°",	"أڈ" => "أ¯",
							"أژ" => "أ®",	"أچ" => "أ­",	"أŒ" => "أ¬",
							"أ‹" => "أ«",	"أٹ" => "أھ",	"أ‰" => "أ©",
							"أˆ" => "أ¨",	"أ‡" => "أ§",	"أ†" => "أ¦",
							"أ…" => "أ¥",	"أ„" => "أ¤",	"أƒ" => "أ£",
							"أ‚" => "أ¢",	"أپ" => "أ،",	"أ€" => "أ ",
							"Z" => "z",		"Y" => "y",		"X" => "x",
							"W" => "w",		"V" => "v",		"U" => "u",
							"T" => "t",		"S" => "s",		"R" => "r",
							"Q" => "q",		"P" => "p",		"O" => "o",
							"N" => "n",		"M" => "m",		"L" => "l",
							"K" => "k",		"J" => "j",		"I" => "i",
							"H" => "h",		"G" => "g",		"F" => "f",
							"E" => "e",		"D" => "d",		"C" => "c",
							"B" => "b",		"A" => "a",
						);

		$UTF8_TABLES['strtoupper'] = array(
						"ï½ڑ" => "ï¼؛",	"ï½™" => "ï¼¹",	"ï½ک" => "ï¼¸",
						"ï½—" => "ï¼·",	"ï½–" => "ï¼¶",	"ï½•" => "ï¼µ",
						"ï½”" => "ï¼´",	"ï½“" => "ï¼³",	"ï½’" => "ï¼²",
						"ï½‘" => "ï¼±",	"ï½گ" => "ï¼°",	"ï½ڈ" => "ï¼¯",
						"ï½ژ" => "ï¼®",	"ï½چ" => "ï¼­",	"ï½Œ" => "ï¼¬",
						"ï½‹" => "ï¼«",	"ï½ٹ" => "ï¼ھ",	"ï½‰" => "ï¼©",
						"ï½ˆ" => "ï¼¨",	"ï½‡" => "ï¼§",	"ï½†" => "ï¼¦",
						"ï½…" => "ï¼¥",	"ï½„" => "ï¼¤",	"ï½ƒ" => "ï¼£",
						"ï½‚" => "ï¼¢",	"ï½پ" => "ï¼،",	"ل؟³" => "ل؟¼",
						"ل؟¥" => "ل؟¬",	"ل؟،" => "ل؟©",	"ل؟ " => "ل؟¨",
						"ل؟‘" => "ل؟™",	"ل؟گ" => "ل؟ک",	"ل؟ƒ" => "ل؟Œ",
						"ل¾¾" => "خ™",	"ل¾³" => "ل¾¼",	"ل¾±" => "ل¾¹",
						"ل¾°" => "ل¾¸",	"ل¾§" => "ل¾¯",	"ل¾¦" => "ل¾®",
						"ل¾¥" => "ل¾­",	"ل¾¤" => "ل¾¬",	"ل¾£" => "ل¾«",
						"ل¾¢" => "ل¾ھ",	"ل¾،" => "ل¾©",	"ل¾ " => "ل¾¨",
						"ل¾—" => "ل¾ں",	"ل¾–" => "ل¾‍",	"ل¾•" => "ل¾‌",
						"ل¾”" => "ل¾œ",	"ل¾“" => "ل¾›",	"ل¾’" => "ل¾ڑ",
						"ل¾‘" => "ل¾™",	"ل¾گ" => "ل¾ک",	"ل¾‡" => "ل¾ڈ",
						"ل¾†" => "ل¾ژ",	"ل¾…" => "ل¾چ",	"ل¾„" => "ل¾Œ",
						"ل¾ƒ" => "ل¾‹",	"ل¾‚" => "ل¾ٹ",	"ل¾پ" => "ل¾‰",
						"ل¾€" => "ل¾ˆ",	"ل½½" => "ل؟»",	"ل½¼" => "ل؟؛",
						"ل½»" => "ل؟«",	"ل½؛" => "ل؟ھ",	"ل½¹" => "ل؟¹",
						"ل½¸" => "ل؟¸",	"ل½·" => "ل؟›",	"ل½¶" => "ل؟ڑ",
						"ل½µ" => "ل؟‹",	"ل½´" => "ل؟ٹ",	"ل½³" => "ل؟‰",
						"ل½²" => "ل؟ˆ",	"ل½±" => "ل¾»",	"ل½°" => "ل¾؛",
						"ل½§" => "ل½¯",	"ل½¦" => "ل½®",	"ل½¥" => "ل½­",
						"ل½¤" => "ل½¬",	"ل½£" => "ل½«",	"ل½¢" => "ل½ھ",
						"ل½،" => "ل½©",	"ل½ " => "ل½¨",	"ل½—" => "ل½ں",
						"ل½•" => "ل½‌",	"ل½“" => "ل½›",	"ل½‘" => "ل½™",
						"ل½…" => "ل½چ",	"ل½„" => "ل½Œ",	"ل½ƒ" => "ل½‹",
						"ل½‚" => "ل½ٹ",	"ل½پ" => "ل½‰",	"ل½€" => "ل½ˆ",
						"ل¼·" => "ل¼؟",	"ل¼¶" => "ل¼¾",	"ل¼µ" => "ل¼½",
						"ل¼´" => "ل¼¼",	"ل¼³" => "ل¼»",	"ل¼²" => "ل¼؛",
						"ل¼±" => "ل¼¹",	"ل¼°" => "ل¼¸",	"ل¼§" => "ل¼¯",
						"ل¼¦" => "ل¼®",	"ل¼¥" => "ل¼­",	"ل¼¤" => "ل¼¬",
						"ل¼£" => "ل¼«",	"ل¼¢" => "ل¼ھ",	"ل¼،" => "ل¼©",
						"ل¼ " => "ل¼¨",	"ل¼•" => "ل¼‌",	"ل¼”" => "ل¼œ",
						"ل¼“" => "ل¼›",	"ل¼’" => "ل¼ڑ",	"ل¼‘" => "ل¼™",
						"ل¼گ" => "ل¼ک",	"ل¼‡" => "ل¼ڈ",	"ل¼†" => "ل¼ژ",
						"ل¼…" => "ل¼چ",	"ل¼„" => "ل¼Œ",	"ل¼ƒ" => "ل¼‹",
						"ل¼‚" => "ل¼ٹ",	"ل¼پ" => "ل¼‰",	"ل¼€" => "ل¼ˆ",
						"ل»¹" => "ل»¸",	"ل»·" => "ل»¶",	"ل»µ" => "ل»´",
						"ل»³" => "ل»²",	"ل»±" => "ل»°",	"ل»¯" => "ل»®",
						"ل»­" => "ل»¬",	"ل»«" => "ل»ھ",	"ل»©" => "ل»¨",
						"ل»§" => "ل»¦",	"ل»¥" => "ل»¤",	"ل»£" => "ل»¢",
						"ل»،" => "ل» ",	"ل»ں" => "ل»‍",	"ل»‌" => "ل»œ",
						"ل»›" => "ل»ڑ",	"ل»™" => "ل»ک",	"ل»—" => "ل»–",
						"ل»•" => "ل»”",	"ل»“" => "ل»’",	"ل»‘" => "ل»گ",
						"ل»ڈ" => "ل»ژ",	"ل»چ" => "ل»Œ",	"ل»‹" => "ل»ٹ",
						"ل»‰" => "ل»ˆ",	"ل»‡" => "ل»†",	"ل»…" => "ل»„",
						"ل»ƒ" => "ل»‚",	"ل»پ" => "ل»€",	"ل؛؟" => "ل؛¾",
						"ل؛½" => "ل؛¼",	"ل؛»" => "ل؛؛",	"ل؛¹" => "ل؛¸",
						"ل؛·" => "ل؛¶",	"ل؛µ" => "ل؛´",	"ل؛³" => "ل؛²",
						"ل؛±" => "ل؛°",	"ل؛¯" => "ل؛®",	"ل؛­" => "ل؛¬",
						"ل؛«" => "ل؛ھ",	"ل؛©" => "ل؛¨",	"ل؛§" => "ل؛¦",
						"ل؛¥" => "ل؛¤",	"ل؛£" => "ل؛¢",	"ل؛،" => "ل؛ ",
						"ل؛›" => "ل¹ ",	"ل؛•" => "ل؛”",	"ل؛“" => "ل؛’",
						"ل؛‘" => "ل؛گ",	"ل؛ڈ" => "ل؛ژ",	"ل؛چ" => "ل؛Œ",
						"ل؛‹" => "ل؛ٹ",	"ل؛‰" => "ل؛ˆ",	"ل؛‡" => "ل؛†",
						"ل؛…" => "ل؛„",	"ل؛ƒ" => "ل؛‚",	"ل؛پ" => "ل؛€",
						"ل¹؟" => "ل¹¾",	"ل¹½" => "ل¹¼",	"ل¹»" => "ل¹؛",
						"ل¹¹" => "ل¹¸",	"ل¹·" => "ل¹¶",	"ل¹µ" => "ل¹´",
						"ل¹³" => "ل¹²",	"ل¹±" => "ل¹°",	"ل¹¯" => "ل¹®",
						"ل¹­" => "ل¹¬",	"ل¹«" => "ل¹ھ",	"ل¹©" => "ل¹¨",
						"ل¹§" => "ل¹¦",	"ل¹¥" => "ل¹¤",	"ل¹£" => "ل¹¢",
						"ل¹،" => "ل¹ ",	"ل¹ں" => "ل¹‍",	"ل¹‌" => "ل¹œ",
						"ل¹›" => "ل¹ڑ",	"ل¹™" => "ل¹ک",	"ل¹—" => "ل¹–",
						"ل¹•" => "ل¹”",	"ل¹“" => "ل¹’",	"ل¹‘" => "ل¹گ",
						"ل¹ڈ" => "ل¹ژ",	"ل¹چ" => "ل¹Œ",	"ل¹‹" => "ل¹ٹ",
						"ل¹‰" => "ل¹ˆ",	"ل¹‡" => "ل¹†",	"ل¹…" => "ل¹„",
						"ل¹ƒ" => "ل¹‚",	"ل¹پ" => "ل¹€",	"ل¸؟" => "ل¸¾",
						"ل¸½" => "ل¸¼",	"ل¸»" => "ل¸؛",	"ل¸¹" => "ل¸¸",
						"ل¸·" => "ل¸¶",	"ل¸µ" => "ل¸´",	"ل¸³" => "ل¸²",
						"ل¸±" => "ل¸°",	"ل¸¯" => "ل¸®",	"ل¸­" => "ل¸¬",
						"ل¸«" => "ل¸ھ",	"ل¸©" => "ل¸¨",	"ل¸§" => "ل¸¦",
						"ل¸¥" => "ل¸¤",	"ل¸£" => "ل¸¢",	"ل¸،" => "ل¸ ",
						"ل¸ں" => "ل¸‍",	"ل¸‌" => "ل¸œ",	"ل¸›" => "ل¸ڑ",
						"ل¸™" => "ل¸ک",	"ل¸—" => "ل¸–",	"ل¸•" => "ل¸”",
						"ل¸“" => "ل¸’",	"ل¸‘" => "ل¸گ",	"ل¸ڈ" => "ل¸ژ",
						"ل¸چ" => "ل¸Œ",	"ل¸‹" => "ل¸ٹ",	"ل¸‰" => "ل¸ˆ",
						"ل¸‡" => "ل¸†",	"ل¸…" => "ل¸„",	"ل¸ƒ" => "ل¸‚",
						"ل¸پ" => "ل¸€",	"ض†" => "ص–",	"ض…" => "ص•",
						"ض„" => "ص”",	"ضƒ" => "ص“",	"ض‚" => "ص’",
						"ضپ" => "ص‘",	"ض€" => "صگ",	"ص؟" => "صڈ",
						"ص¾" => "صژ",	"ص½" => "صچ",	"ص¼" => "صŒ",
						"ص»" => "ص‹",	"ص؛" => "صٹ",	"ص¹" => "ص‰",
						"ص¸" => "صˆ",	"ص·" => "ص‡",	"ص¶" => "ص†",
						"صµ" => "ص…",	"ص´" => "ص„",	"ص³" => "صƒ",
						"ص²" => "ص‚",	"ص±" => "صپ",	"ص°" => "ص€",
						"ص¯" => "ش؟",	"ص®" => "ش¾",	"ص­" => "ش½",
						"ص¬" => "ش¼",	"ص«" => "ش»",	"صھ" => "ش؛",
						"ص©" => "ش¹",	"ص¨" => "ش¸",	"ص§" => "ش·",
						"ص¦" => "ش¶",	"ص¥" => "شµ",	"ص¤" => "ش´",
						"ص£" => "ش³",	"ص¢" => "ش²",	"ص،" => "ش±",
						"شڈ" => "شژ",	"شچ" => "شŒ",	"ش‹" => "شٹ",
						"ش‰" => "شˆ",	"ش‡" => "ش†",	"ش…" => "ش„",
						"شƒ" => "ش‚",	"شپ" => "ش€",	"س¹" => "س¸",
						"سµ" => "س´",	"س³" => "س²",	"س±" => "س°",
						"س¯" => "س®",	"س­" => "س¬",	"س«" => "سھ",
						"س©" => "س¨",	"س§" => "س¦",	"س¥" => "س¤",
						"س£" => "س¢",	"س،" => "س ",	"سں" => "س‍",
						"س‌" => "سœ",	"س›" => "سڑ",	"س™" => "سک",
						"س—" => "س–",	"س•" => "س”",	"س“" => "س’",
						"س‘" => "سگ",	"سژ" => "سچ",	"سŒ" => "س‹",
						"سٹ" => "س‰",	"سˆ" => "س‡",	"س†" => "س…",
						"س„" => "سƒ",	"س‚" => "سپ",	"ز؟" => "ز¾",
						"ز½" => "ز¼",	"ز»" => "ز؛",	"ز¹" => "ز¸",
						"ز·" => "ز¶",	"زµ" => "ز´",	"ز³" => "ز²",
						"ز±" => "ز°",	"ز¯" => "ز®",	"ز­" => "ز¬",
						"ز«" => "زھ",	"ز©" => "ز¨",	"ز§" => "ز¦",
						"ز¥" => "ز¤",	"ز£" => "ز¢",	"ز،" => "ز ",
						"زں" => "ز‍",	"ز‌" => "زœ",	"ز›" => "زڑ",
						"ز™" => "زک",	"ز—" => "ز–",	"ز•" => "ز”",
						"ز“" => "ز’",	"ز‘" => "زگ",	"زڈ" => "زژ",
						"زچ" => "زŒ",	"ز‹" => "زٹ",	"زپ" => "ز€",
						"ر؟" => "ر¾",	"ر½" => "ر¼",	"ر»" => "ر؛",
						"ر¹" => "ر¸",	"ر·" => "ر¶",	"رµ" => "ر´",
						"ر³" => "ر²",	"ر±" => "ر°",	"ر¯" => "ر®",
						"ر­" => "ر¬",	"ر«" => "رھ",	"ر©" => "ر¨",
						"ر§" => "ر¦",	"ر¥" => "ر¤",	"ر£" => "ر¢",
						"ر،" => "ر ",	"رں" => "ذڈ",	"ر‍" => "ذژ",
						"ر‌" => "ذچ",	"رœ" => "ذŒ",	"ر›" => "ذ‹",
						"رڑ" => "ذٹ",	"ر™" => "ذ‰",	"رک" => "ذˆ",
						"ر—" => "ذ‡",	"ر–" => "ذ†",	"ر•" => "ذ…",
						"ر”" => "ذ„",	"ر“" => "ذƒ",	"ر’" => "ذ‚",
						"ر‘" => "ذپ",	"رگ" => "ذ€",	"رڈ" => "ذ¯",
						"رژ" => "ذ®",	"رچ" => "ذ­",	"رŒ" => "ذ¬",
						"ر‹" => "ذ«",	"رٹ" => "ذھ",	"ر‰" => "ذ©",
						"رˆ" => "ذ¨",	"ر‡" => "ذ§",	"ر†" => "ذ¦",
						"ر…" => "ذ¥",	"ر„" => "ذ¤",	"رƒ" => "ذ£",
						"ر‚" => "ذ¢",	"رپ" => "ذ،",	"ر€" => "ذ ",
						"ذ؟" => "ذں",	"ذ¾" => "ذ‍",	"ذ½" => "ذ‌",
						"ذ¼" => "ذœ",	"ذ»" => "ذ›",	"ذ؛" => "ذڑ",
						"ذ¹" => "ذ™",	"ذ¸" => "ذک",	"ذ·" => "ذ—",
						"ذ¶" => "ذ–",	"ذµ" => "ذ•",	"ذ´" => "ذ”",
						"ذ³" => "ذ“",	"ذ²" => "ذ’",	"ذ±" => "ذ‘",
						"ذ°" => "ذگ",	"دµ" => "خ•",	"د²" => "خ£",
						"د±" => "خ،",	"د°" => "خڑ",	"د¯" => "د®",
						"د­" => "د¬",	"د«" => "دھ",	"د©" => "د¨",
						"د§" => "د¦",	"د¥" => "د¤",	"د£" => "د¢",
						"د،" => "د ",	"دں" => "د‍",	"د‌" => "دœ",
						"د›" => "دڑ",	"د™" => "دک",	"د–" => "خ ",
						"د•" => "خ¦",	"د‘" => "خک",	"دگ" => "خ’",
						"دژ" => "خڈ",	"دچ" => "خژ",	"دŒ" => "خŒ",
						"د‹" => "خ«",	"دٹ" => "خھ",	"د‰" => "خ©",
						"دˆ" => "خ¨",	"د‡" => "خ§",	"د†" => "خ¦",
						"د…" => "خ¥",	"د„" => "خ¤",	"دƒ" => "خ£",
						"د‚" => "خ£",	"دپ" => "خ،",	"د€" => "خ ",
						"خ؟" => "خں",	"خ¾" => "خ‍",	"خ½" => "خ‌",
						"خ¼" => "خœ",	"خ»" => "خ›",	"خ؛" => "خڑ",
						"خ¹" => "خ™",	"خ¸" => "خک",	"خ·" => "خ—",
						"خ¶" => "خ–",	"خµ" => "خ•",	"خ´" => "خ”",
						"خ³" => "خ“",	"خ²" => "خ’",	"خ±" => "خ‘",
						"خ¯" => "خٹ",	"خ®" => "خ‰",	"خ­" => "خˆ",
						"خ¬" => "خ†",	"ت’" => "ئ·",	"ت‹" => "ئ²",
						"تٹ" => "ئ±",	"تˆ" => "ئ®",	"تƒ" => "ئ©",
						"ت€" => "ئ¦",	"ةµ" => "ئں",	"ة²" => "ئ‌",
						"ة¯" => "ئœ",	"ة©" => "ئ–",	"ة¨" => "ئ—",
						"ة£" => "ئ”",	"ة " => "ئ“",	"ة›" => "ئگ",
						"ة™" => "ئڈ",	"ة—" => "ئٹ",	"ة–" => "ئ‰",
						"ة”" => "ئ†",	"ة“" => "ئپ",	"ب³" => "ب²",
						"ب±" => "ب°",	"ب¯" => "ب®",	"ب­" => "ب¬",
						"ب«" => "بھ",	"ب©" => "ب¨",	"ب§" => "ب¦",
						"ب¥" => "ب¤",	"ب£" => "ب¢",	"بں" => "ب‍",
						"ب‌" => "بœ",	"ب›" => "بڑ",	"ب™" => "بک",
						"ب—" => "ب–",	"ب•" => "ب”",	"ب“" => "ب’",
						"ب‘" => "بگ",	"بڈ" => "بژ",	"بچ" => "بŒ",
						"ب‹" => "بٹ",	"ب‰" => "بˆ",	"ب‡" => "ب†",
						"ب…" => "ب„",	"بƒ" => "ب‚",	"بپ" => "ب€",
						"ا؟" => "ا¾",	"ا½" => "ا¼",	"ا»" => "ا؛",
						"ا¹" => "ا¸",	"اµ" => "ا´",	"ا³" => "ا²",
						"ا¯" => "ا®",	"ا­" => "ا¬",	"ا«" => "اھ",
						"ا©" => "ا¨",	"ا§" => "ا¦",	"ا¥" => "ا¤",
						"ا£" => "ا¢",	"ا،" => "ا ",	"اں" => "ا‍",
						"ا‌" => "ئژ",	"اœ" => "ا›",	"اڑ" => "ا™",
						"اک" => "ا—",	"ا–" => "ا•",	"ا”" => "ا“",
						"ا’" => "ا‘",	"اگ" => "اڈ",	"اژ" => "اچ",
						"اŒ" => "ا‹",	"ا‰" => "اˆ",	"ا†" => "ا…",
						"ئ؟" => "ا·",	"ئ½" => "ئ¼",	"ئ¹" => "ئ¸",
						"ئ¶" => "ئµ",	"ئ´" => "ئ³",	"ئ°" => "ئ¯",
						"ئ­" => "ئ¬",	"ئ¨" => "ئ§",	"ئ¥" => "ئ¤",
						"ئ£" => "ئ¢",	"ئ،" => "ئ ",	"ئ‍" => "ب ",
						"ئ™" => "ئک",	"ئ•" => "ا¶",	"ئ’" => "ئ‘",
						"ئŒ" => "ئ‹",	"ئˆ" => "ئ‡",	"ئ…" => "ئ„",
						"ئƒ" => "ئ‚",	"إ؟" => "S",	"إ¾" => "إ½",
						"إ¼" => "إ»",	"إ؛" => "إ¹",	"إ·" => "إ¶",
						"إµ" => "إ´",	"إ³" => "إ²",	"إ±" => "إ°",
						"إ¯" => "إ®",	"إ­" => "إ¬",	"إ«" => "إھ",
						"إ©" => "إ¨",	"إ§" => "إ¦",	"إ¥" => "إ¤",
						"إ£" => "إ¢",	"إ،" => "إ ",	"إں" => "إ‍",
						"إ‌" => "إœ",	"إ›" => "إڑ",	"إ™" => "إک",
						"إ—" => "إ–",	"إ•" => "إ”",	"إ“" => "إ’",
						"إ‘" => "إگ",	"إڈ" => "إژ",	"إچ" => "إŒ",
						"إ‹" => "إٹ",	"إˆ" => "إ‡",	"إ†" => "إ…",
						"إ„" => "إƒ",	"إ‚" => "إپ",	"إ€" => "ؤ؟",
						"ؤ¾" => "ؤ½",	"ؤ¼" => "ؤ»",	"ؤ؛" => "ؤ¹",
						"ؤ·" => "ؤ¶",	"ؤµ" => "ؤ´",	"ؤ³" => "ؤ²",
						"ؤ±" => "I",	"ؤ¯" => "ؤ®",	"ؤ­" => "ؤ¬",
						"ؤ«" => "ؤھ",	"ؤ©" => "ؤ¨",	"ؤ§" => "ؤ¦",
						"ؤ¥" => "ؤ¤",	"ؤ£" => "ؤ¢",	"ؤ،" => "ؤ ",
						"ؤں" => "ؤ‍",	"ؤ‌" => "ؤœ",	"ؤ›" => "ؤڑ",
						"ؤ™" => "ؤک",	"ؤ—" => "ؤ–",	"ؤ•" => "ؤ”",
						"ؤ“" => "ؤ’",	"ؤ‘" => "ؤگ",	"ؤڈ" => "ؤژ",
						"ؤچ" => "ؤŒ",	"ؤ‹" => "ؤٹ",	"ؤ‰" => "ؤˆ",
						"ؤ‡" => "ؤ†",	"ؤ…" => "ؤ„",	"ؤƒ" => "ؤ‚",
						"ؤپ" => "ؤ€",	"أ؟" => "إ¸",	"أ¾" => "أ‍",
						"أ½" => "أ‌",	"أ¼" => "أœ",	"أ»" => "أ›",
						"أ؛" => "أڑ",	"أ¹" => "أ™",	"أ¸" => "أک",
						"أ¶" => "أ–",	"أµ" => "أ•",	"أ´" => "أ”",
						"أ³" => "أ“",	"أ²" => "أ’",	"أ±" => "أ‘",
						"أ°" => "أگ",	"أ¯" => "أڈ",	"أ®" => "أژ",
						"أ­" => "أچ",	"أ¬" => "أŒ",	"أ«" => "أ‹",
						"أھ" => "أٹ",	"أ©" => "أ‰",	"أ¨" => "أˆ",
						"أ§" => "أ‡",	"أ¦" => "أ†",	"أ¥" => "أ…",
						"أ¤" => "أ„",	"أ£" => "أƒ",	"أ¢" => "أ‚",
						"أ،" => "أپ",	"أ " => "أ€",	"آµ" => "خœ",
						"z" => "Z",		"y" => "Y",		"x" => "X",
						"w" => "W",		"v" => "V",		"u" => "U",
						"t" => "T",		"s" => "S",		"r" => "R",
						"q" => "Q",		"p" => "P",		"o" => "O",
						"n" => "N",		"m" => "M",		"l" => "L",
						"k" => "K",		"j" => "J",		"i" => "I",
						"h" => "H",		"g" => "G",		"f" => "F",
						"e" => "E",		"d" => "D",		"c" => "C",
						"b" => "B",		"a" => "A",
					);
		return true;
		
	}
}

/*******************************************************************************************************/

?>